package JPL.java.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import JPL.java.entities.Candidate;
import JPL.java.entities.Experience;
import JPL.java.entities.Fresher;
import JPL.java.entities.Intern;
import JPL.java.service.CandidateService;
import JPL.java.util.DBUtils;

public class CandidateDaoImpl implements CandidateDAO{
	List<Candidate> candidates = new ArrayList<>();
	Connection connection;
	PreparedStatement preparedStatement = null;
	ResultSet results = null;
	
	public void getAllFullName()throws SQLException {
		try {
			connection = DBUtils.getInstance().getConnection();
			preparedStatement = connection.prepareStatement("select * from candidate");
			results = preparedStatement.executeQuery();
			StringBuffer fullname = new StringBuffer();
			while(results.next()) {
				fullname.append(results.getString(2)).append(",");
			}
			if(fullname.length() == 0){
				System.out.println("No name found");
			}else {
				System.out.println(fullname.deleteCharAt(fullname.length()-1));				
			}
		}catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public int countCandidate() throws SQLException{
		int count = 0;
		try {
			connection = DBUtils.getInstance().getConnection();
			preparedStatement = connection.prepareStatement("select count(candidateID) from candidate");
			results = preparedStatement.executeQuery();
			
			while(results.next()) {
				count = results.getInt(1);
			}
		}catch (Exception e) {
			e.printStackTrace();
		}
		return count;
	}
	
//	public void update(Candidate candidate) {
//		try {
//			connection = DBUtils.getInstance().getConnection();
//			preparedStatement = connection.prepareStatement("select * from Candidate where candidateID = ?", ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
//			preparedStatement.setString(1, candidate.getCandidateID());
//			results = preparedStatement.executeQuery();
//			
//			results.updateString(2, candidate.getFullName());
//			results.updateRow();
//			
//		}catch (Exception e) {
//			e.printStackTrace();
//		}
//
//	}
	
	public void update(Candidate candidate) {
		try {
			connection = DBUtils.getInstance().getConnection();
			preparedStatement = connection.prepareStatement("update from Candidate set fullName = ?, birthDay = ?, phone=?, email=?, candidate_type=? where candidateId=?");
			preparedStatement.setString(1, candidate.getFullName());
			preparedStatement.setString(2, candidate.getBirthDay());
			preparedStatement.setString(3, candidate.getPhone());
			preparedStatement.setString(4, candidate.getEmail());
			preparedStatement.setInt(5, candidate.getCandidate_Type());
			preparedStatement.executeUpdate();
			if(candidate instanceof Experience) {
				Experience ex = (Experience) candidate;
				PreparedStatement pre1 = connection.prepareStatement("update from Experienece set ExpInYear =?, ProSkill = ? where CandidateId = ?");
				pre1.setInt(1, (Experience)candidate));
			}
		}catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public Candidate getInfo(String id) throws SQLException{
		try {
			connection = DBUtils.getInstance().getConnection();
			preparedStatement = connection.prepareStatement("select * from Candidate where candidateID = ?");
			preparedStatement.setString(1, id);
			results = preparedStatement.executeQuery();
			while(results.next()) {
				if(results.getInt(6) == 1) {
					return getExperience(results);					
				}else if(results.getInt(6) == 2) {
					return getFresher(results);
				}else if(results.getInt(6) == 3) {
					return getIntern(results);
				}
				
			}
		}catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public Experience getExperience(ResultSet rs) {
		Experience result = null;
		try {
			connection = DBUtils.getInstance().getConnection();
			preparedStatement = connection.prepareStatement("select * from Experience where CandidateId = ?");
//			System.out.println(rs.getString(1));
			preparedStatement.setString(1, rs.getString(1));
			results = preparedStatement.executeQuery();
			if(results.next()) {
					result = new Experience(rs.getString(1),rs.getString(2), rs.getString(3),rs.getString(4),rs.getString(5), rs.getInt(6), results.getInt(3), results.getString(4));					
//					result.showInfo();
			}else {
				System.out.println("No found");
			}
		}catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
	
	public Fresher getFresher(ResultSet rs) {
		Fresher result = null;
		try {
			connection = DBUtils.getInstance().getConnection();
			preparedStatement = connection.prepareStatement("select * from Fresher where CandidateId = ?");
			preparedStatement.setString(1, rs.getString(1));
			results = preparedStatement.executeQuery();
			if(results.next()) {
					result = new Fresher(rs.getString(1),rs.getString(2), rs.getString(3),rs.getString(4),rs.getString(5), rs.getInt(6), results.getString(3), results.getString(4), results.getString(5));					
//					ex.showInfo();
			}else {
				System.out.println("Not infor to fresher");
			}
		}catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
	
	public Intern getIntern(ResultSet rs) {
		Intern result = null;
		try {
			connection = DBUtils.getInstance().getConnection();
			preparedStatement = connection.prepareStatement("select * from Intern where CandidateId = ?");
			preparedStatement.setString(1, rs.getString(1));
			results = preparedStatement.executeQuery();
			if(results.next()) {
					result = new Intern(rs.getString(1),rs.getString(2), rs.getString(3),rs.getString(4),rs.getString(5), rs.getInt(6), results.getString(3), results.getString(4), results.getString(5));					
//					ex.showInfo();
			}else {
//				System.out.println("Not infor to experience");
			}
		}catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
	public void save(Candidate candidate) {
		try {
			connection = DBUtils.getInstance().getConnection();
			preparedStatement = connection.prepareStatement("insert into Candidate(candidateId, fullName, birthDay, phone, email, candidate_type) values(?, ?, ?,?,?,?)");
			preparedStatement.setString(1, candidate.getCandidateID());
			preparedStatement.setString(2, candidate.getFullName());
			preparedStatement.setString(3, candidate.getBirthDay());
			preparedStatement.setString(4, candidate.getPhone());
			preparedStatement.setString(5, candidate.getEmail());
			preparedStatement.setInt(6, candidate.getCandidate_Type());
			preparedStatement.execute();
		}catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void saveExperience(Experience ex) {
		try {
			connection = DBUtils.getInstance().getConnection();
			preparedStatement = connection.prepareStatement("insert into Experience(CandidateId, ExpInYear, ProSkill) values(?, ?, ?)");
			preparedStatement.setString(1, ex.getCandidateID());
			preparedStatement.setInt(2, ex.getExpInYear());
			preparedStatement.setString(3, ex.getProSkill());
			preparedStatement.execute();
		}catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void saveFresher(Fresher fs) {
		try {
			connection = DBUtils.getInstance().getConnection();
			preparedStatement = connection.prepareStatement("insert into Fresher(CandidateId, Graduation_date, Graduation_rank, education) values(?, ?, ?, ?)");
			preparedStatement.setString(1, fs.getCandidateID());
			preparedStatement.setString(2, fs.getGraduation_date());
			preparedStatement.setString(3, fs.getGraduation_rank());
			preparedStatement.setString(4, fs.getEducation());
			preparedStatement.execute();
		}catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void saveIntern(Intern in) {
		try {
			connection = DBUtils.getInstance().getConnection();
			preparedStatement = connection.prepareStatement("insert into Intern(CandidateId, Majors, Semester, University) values(?, ?, ?, ?)");
			preparedStatement.setString(1, in.getCandidateID());
			preparedStatement.setString(2, in.getMajors());
			preparedStatement.setString(3, in.getSemester());
			preparedStatement.setString(4, in.getUniversity_name());
			preparedStatement.execute();
		}catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public List<Candidate> getAllCandidate(){
		List<String> listId = new ArrayList<>();
		List<Candidate> candidates = new ArrayList<>();
		try {
			connection = DBUtils.getInstance().getConnection();
			preparedStatement = connection.prepareStatement("select * from candidate");
			results = preparedStatement.executeQuery();
			while(results.next()) {
				listId.add(results.getString(1));
			}
			for(String x: listId) {
				candidates.add(getInfo(x));
			}
		}catch (Exception e) {
			e.printStackTrace();
		}
		return candidates;
	}
	
	public static void main(String[] args) throws SQLException {
		
		Candidate can = new Candidate("DE01", "Dung Xuong", "2001-05-20", "0827299123", "docute333", 1);
		new CandidateDaoImpl().update(can);
	}
	
	
	@Override
	public List<Candidate> getAll() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean saveCandidate(Candidate candidate) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Candidate findCandidatebyId(String id) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}
	
}
